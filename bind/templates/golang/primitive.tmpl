{{define "PrimitiveContract"}}
// {{.Type}} is an auto generated Go binding around an Ethereum contract.
type {{.Type}} struct {
    address common.Address
    txHash common.Hash
    createdAt *big.Int

    {{.Type}}Caller     // Read-only binding to the contract
    {{.Type}}Transactor // Write-only binding to the contract
    {{.Type}}Filterer   // Log filterer for contract events
}

// Address is getter method of {{.Type}}.address
func (_{{.Type}} *{{.Type}}) Address() common.Address {
    return _{{.Type}}.address
}

// TxHash is getter method of {{.Type}}.txHash
func (_{{.Type}} *{{.Type}}) TxHash() common.Hash {
    return _{{.Type}}.txHash
}

// CreatedAt is getter method of {{.Type}}.createdAt
func (_{{.Type}} *{{.Type}}) CreatedAt() *big.Int {
    return _{{.Type}}.createdAt
}

// {{.Type}}Caller is an auto generated read-only Go binding around an Ethereum contract.
type {{.Type}}Caller struct {
    contract *blockchain.BoundContract // Generic contract wrapper for the low level calls
}

// {{.Type}}Transactor is an auto generated write-only Go binding around an Ethereum contract.
type {{.Type}}Transactor struct {
    contract *blockchain.BoundContract // Generic contract wrapper for the low level calls
}

// {{.Type}}Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type {{.Type}}Filterer struct {
    contract *blockchain.BoundContract // Generic contract wrapper for the low level calls
}
{{end}}

{{define "PrimitiveSession"}}
// {{.Type}}Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type {{.Type}}Session struct {
    Contract     *{{.Type}}        // Generic contract binding to set the session for
    CallOpts     bind.CallOpts     // Call options to use throughout this session
    TransactOpts blockchain.TransactOpts // Transaction auth options to use throughout this session
}

// {{.Type}}CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type {{.Type}}CallerSession struct {
    Contract *{{.Type}}Caller // Generic contract caller binding to set the session for
    CallOpts bind.CallOpts    // Call options to use throughout this session
}

// {{.Type}}TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type {{.Type}}TransactorSession struct {
    Contract     *{{.Type}}Transactor // Generic contract transactor binding to set the session for
    TransactOpts blockchain.TransactOpts    // Transaction auth options to use throughout this session
}
{{end}}

{{define "PrimitiveRaw"}}
// {{.Type}}Raw is an auto generated low-level Go binding around an Ethereum contract.
type {{.Type}}Raw struct {
    Contract *{{.Type}} // Generic contract binding to access the raw methods on
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_{{.Type}} *{{.Type}}Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
    return _{{.Type}}.Contract.{{.Type}}Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_{{.Type}} *{{.Type}}Raw) Transfer(opts *blockchain.TransactOpts) (*chainTypes.Transaction, error) {
    return _{{.Type}}.Contract.{{.Type}}Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_{{.Type}} *{{.Type}}Raw) Transact(opts *blockchain.TransactOpts, method string, params ...interface{}) (*chainTypes.Transaction, error) {
    return _{{.Type}}.Contract.{{.Type}}Transactor.contract.Transact(opts, method, params...)
}

// {{.Type}}CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type {{.Type}}CallerRaw struct {
    Contract *{{.Type}}Caller // Generic read-only contract binding to access the raw methods on
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_{{.Type}} *{{.Type}}CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
    return _{{.Type}}.Contract.contract.Call(opts, result, method, params...)
}

// {{.Type}}TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type {{.Type}}TransactorRaw struct {
    Contract *{{.Type}}Transactor // Generic write-only contract binding to access the raw methods on
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_{{.Type}} *{{.Type}}TransactorRaw) Transfer(opts *blockchain.TransactOpts) (*chainTypes.Transaction, error) {
    return _{{.Type}}.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_{{.Type}} *{{.Type}}TransactorRaw) Transact(opts *blockchain.TransactOpts, method string, params ...interface{}) (*chainTypes.Transaction, error) {
    return _{{.Type}}.Contract.contract.Transact(opts, method, params...)
}
{{end}}